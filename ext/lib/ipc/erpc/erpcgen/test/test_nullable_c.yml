---
name: param buildin
desc:
params:
  dir:
    - "in"
    - "out"
    - "inout"
idl: |
  interface foo {
    bar({dir} string a @nullable @max_length(8)) -> void
  }
test_client.cpp:
  - re: void bar\(\w*\s*char \* a\)
  - if: dir in ('in', 'inout')
    then:
      - if (a == NULL)
      - codec->writeNullFlag(true)
      - if (a)
      - codec->writeString(strlen(a), a);
  - if: dir == 'out'
    then:
      - not: if (a != NULL)
      - codec->readString(&a_len, &a_local);
  - if: dir == 'inout'
    then:
      - if (a != NULL)
      - codec->readString(&a_len, &a_local);
test_server.cpp:
  - ::bar_shim
  - char * a = NULL;
  - if: dir in ('in', 'inout')
    then:
      - bool isNull;
      - codec->readNullFlag(&isNull)
      - if (!isNull)
      - err = codec->readString(&a_len, &a_local)
      - else
      - a = NULL;
  - if: dir == 'out'
    then:
      - not: if (a != NULL)
      - codec->writeString(strlen(a), a);
  - if: dir =='inout'
    then:
      - if (a != NULL)
      - codec->writeString(strlen(a), a);
---
name: in param struct
desc:
params:
  type:
    - [bool, bool]
    - [int8, int8_t]
    - [int16, int16_t]
    - [int32, int32_t]
    - [uint8, uint8_t]
    - [uint16, uint16_t]
    - [uint32, uint32_t]
    - [float, float]
    - [double, double]
idl: |
  struct Vector {
    {type[0]}[3] v
  }
  interface foo {
    bar(Vector v @nullable) -> void
  }
test.h:
  - '{type[1]} v[3]'
  - void bar(const Vector * v);
test_client.cpp:
  - re: void bar\(const Vector \* v\)
  - if (v == NULL)
  - writeNullFlag(true)
  - "{"
  - writeNullFlag(false)
  - write_Vector_struct
  - "}"
test_server.cpp:
  - ::bar_shim
  - bool isNull
  - readNullFlag
  - if (!isNull)
  - read_Vector_struct
  - else
  - v = NULL
  - endReadMessage

---
name: struct list field
desc:
idl: |
  struct pair {
    string a
    list<bool> b @nullable
  }
  interface foo {
    bar(pair s) -> void
  }
test_client.cpp:
  - int32_t write_pair_struct
  - if (data->b.elements == NULL)
  - writeNullFlag(true)
  - '{'
  - writeNullFlag(false)
  - write_list_0_t_struct
  - '}'
  - void bar(const pair * s)
  - write_pair_struct
test_server.cpp:
  - int32_t read_pair_struct
  - bool isNull
  - readNullFlag
  - if (!isNull)
  - read_list_0_t_struct
  - else
  - data->b.elements = NULL
  - data->b.elementsCount = 0
  - endReadStruct

name: struct binary field
desc:
idl: |
  struct pair {
    binary b @nullable
  }
  interface foo {
    bar(pair s) -> void
  }
test_client.cpp:
  - int32_t write_pair_struct
  - if (data->b.data == NULL)
  - writeNullFlag(true)
  - '{'
  - writeNullFlag(false)
  - write_binary_t_struct
  - '}'
  - void bar(const pair * s)
  - write_pair_struct
test_server.cpp:
  - int32_t read_pair_struct
  - bool isNull
  - readNullFlag
  - if (!isNull)
  - read_binary_t_struct
  - else
  - data->b.data = NULL
  - data->b.dataLength = 0

---
name: struct string field
desc:
params:
  dir:
    - "in"
    - "out"
    - "inout"
idl: |
  struct pair {
    string a @nullable
  }

  interface foo {
    bar({dir} pair s) -> void
  }
test_client.cpp:
  - if: dir in ('in', 'inout')
    then:
      - int32_t write_pair_struct
      - codec->startWriteStruct();
      - if (data->a == NULL)
      - codec->writeNullFlag(true);
      - else
      - codec->writeNullFlag(false);
      - if (data->a)
      - codec->writeString(strlen(data->a), data->a);
  - if: dir in ('out', 'inout')
    then:
      - int32_t read_pair_struct
      - bool isNull;
      - codec->startReadStruct();
      - codec->readNullFlag(&isNull);
      - if (!isNull)
      - codec->readString(&a_len, &a_local);
      - else
      - data->a = NULL;
      - data->a = 0;
test_server.cpp:
  - if: dir in ('in', 'inout')
    then:
      - int32_t read_pair_struct
      - bool isNull;
      - codec->startReadStruct();
      - codec->readNullFlag(&isNull);
      - if (!isNull)
      - codec->readString(&a_len, &a_local);
      - else
      - data->a = NULL;
      - data->a = 0;
  - if: dir in ('out', 'inout')
    then:
      - int32_t write_pair_struct
      - codec->startWriteStruct();
      - if (data->a == NULL)
      - codec->writeNullFlag(true);
      - else
      - codec->writeNullFlag(false);
      - if (data->a)
      - codec->writeString(strlen(data->a), data->a);

---
name: return struct
desc:
idl: |
  struct pair {
    string a
  }

  interface foo {
    bar() -> @nullable pair
  }

test_client.cpp:
  - pair * result;
  - bool isNull;
  - err = codec->readNullFlag(&isNull);
  - if (!isNull)

test_server.cpp:
  - if (result == NULL)
  - codec->writeNullFlag(true);
  - codec->writeNullFlag(false);
